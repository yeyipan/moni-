'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 定义一个Animal
var Animal = function () {
    // 初始化执行，构造函数
    function Animal(name) {
        _classCallCheck(this, Animal);
        
        this.name = name;
    }

    _createClass(Animal, [{
        key: 'sleep',
        value: function sleep() {
            console.log(this.name + ' can sleep');
        }
    }, {
        key: 'eat',
        value: function eat() {
            console.log(this.name + ' can eat');
        }
    }, {
        key: 'walk',
        value: function walk() {
            console.log(this.name + ' can walk');
        }
    }]);

    return Animal;
}();

// 继承Animal类


var Duck = function (_Animal) {
    _inherits(Duck, _Animal);

    function Duck() {
        _classCallCheck(this, Duck);

        return _possibleConstructorReturn(this, (Duck.__proto__ || Object.getPrototypeOf(Duck)).apply(this, arguments));
    }

    _createClass(Duck, [{
        key: 'walk',
        value: function walk() {
            _get(Duck.prototype.__proto__ || Object.getPrototypeOf(Duck.prototype), 'walk', this).call(this); // 此处的super指向Duck的父类，即Animal
            console.log(this.name + ' has two legs');
        }
    }]);

    return Duck;
}(Animal);

// let定义变量的关键，在定义局部变量的时候使用


var yellowDuck = new Duck('小黄鸭'); //实例化
yellowDuck.walk();
console.log(yellowDuck.name);